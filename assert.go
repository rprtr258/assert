package assert

import (
	"bufio"
	"bytes"
	"fmt"
	"path/filepath"
	"reflect"
	"runtime"
	"strings"
	"testing"
	"unicode"
	"unicode/utf8"

	"github.com/davecgh/go-spew/spew"
	"github.com/k0kubun/pp"
	"github.com/muesli/termenv"
	"github.com/pmezard/go-difflib/difflib"

	"github.com/rprtr258/assert/q"
)

// Stolen from the `go test` tool.
// isTest tells whether name looks like a test (or benchmark, according to prefix).
// It is a Test (say) if there is a character after Test that is not a lower-case letter.
// We don't want TesticularCancer.
func isTest(name, prefix string) bool {
	if !strings.HasPrefix(name, prefix) {
		return false
	}
	if len(name) == len(prefix) { // "Test" is ok
		return true
	}
	r, _ := utf8.DecodeRuneInString(name[len(prefix):])
	return !unicode.IsLower(r)
}

/* CallerInfo is necessary because the assert functions use the testing object
internally, causing it to print the file:line of the assert method, rather than where
the problem actually occurred in calling code.*/

// CallerInfo returns an array of strings containing the file and line number
// of each stack frame leading from the current test to the assert call that
// failed.
func CallerInfo() []string {
	var pc uintptr
	var ok bool
	var file string
	var line int
	var name string

	callers := []string{}
	for i := 0; ; i++ {
		pc, file, line, ok = runtime.Caller(i)
		if !ok {
			// The breaks below failed to terminate the loop, and we ran off the
			// end of the call stack.
			break
		}

		// This is a huge edge case, but it will panic if this is the case, see #180
		if file == "<autogenerated>" {
			break
		}

		f := runtime.FuncForPC(pc)
		if f == nil {
			break
		}
		name = f.Name()

		// testing.tRunner is the standard library function that calls
		// tests. Subtests are called directly by tRunner, without going through
		// the Test/Benchmark/Example function that contains the t.Run calls, so
		// with subtests we should break when we hit tRunner, without adding it
		// to the list of callers.
		if name == "testing.tRunner" {
			break
		}

		parts := strings.Split(file, "/")
		file = parts[len(parts)-1]
		if len(parts) > 1 {
			dir := parts[len(parts)-2]
			if (dir != "assert" && dir != "mock" && dir != "require") || file == "mock_test.go" {
				path, _ := filepath.Abs(file)
				callers = append(callers, fmt.Sprintf("%s:%d", path, line))
			}
		}

		// Drop the package
		segments := strings.Split(name, ".")
		name = segments[len(segments)-1]
		if isTest(name, "Test") ||
			isTest(name, "Benchmark") ||
			isTest(name, "Example") {
			break
		}
	}

	return callers
}

// Aligns the provided message so that all lines after the first line start at the same location as the first line.
// Assumes that the first line starts at the correct location (after carriage return, tab, label, spacer and tab).
// The longestLabelLen parameter specifies the length of the longest label in the output (required becaues this is the
// basis on which the alignment occurs).
func indentMessageLines(message string, longestLabelLen int) string {
	outBuf := new(bytes.Buffer)

	for i, scanner := 0, bufio.NewScanner(strings.NewReader(message)); scanner.Scan(); i++ {
		// no need to align first line because it starts at the correct location (after the label)
		if i != 0 {
			// append alignLen+1 spaces to align with "{{longestLabel}}:" before adding tab
			outBuf.WriteString("\n\t" + strings.Repeat(" ", longestLabelLen+1) + "\t")
		}
		outBuf.WriteString(scanner.Text())
	}

	return outBuf.String()
}

func messageFromMsgAndArgs(msgAndArgs ...any) string {
	switch len(msgAndArgs) {
	case 0:
		return ""
	case 1:
		msg := msgAndArgs[0]
		if msgAsStr, ok := msg.(string); ok {
			return msgAsStr
		}
		return fmt.Sprintf("%+v", msg)
	default:
		return fmt.Sprintf(msgAndArgs[0].(string), msgAndArgs[1:]...)
	}
}

type labeledContent struct {
	label   string
	content string
}

// labeledOutput returns a string consisting of the provided labeledContent. Each labeled output is appended in the following manner:
//
//	\t{{label}}:{{align_spaces}}\t{{content}}\n
//
// The initial carriage return is required to undo/erase any padding added by testing.T.Errorf. The "\t{{label}}:" is for the label.
// If a label is shorter than the longest label provided, padding spaces are added to make all the labels match in length. Once this
// alignment is achieved, "\t{{content}}\n" is added for the output.
//
// If the content of the labeledOutput contains line breaks, the subsequent lines are aligned so that they start at the same location as the first line.
func labeledOutput(content ...labeledContent) string {
	longestLabel := 0
	for _, v := range content {
		longestLabel = max(longestLabel, len(v.label))
	}

	lines := make([]string, len(content))
	for i, v := range content {
		lines[i] = v.label + ":" + strings.Repeat(" ", longestLabel-len(v.label)) + "\t" + indentMessageLines(v.content, longestLabel)
	}
	return strings.Join(lines, "\n")
}

// Fail reports a failure through
func Fail(t testing.TB, failureMessage string, msgAndArgs ...any) bool {
	t.Helper()

	t.Error("\n" + labeledOutput([]labeledContent{
		{"Test", t.Name()},
		{"Messages", messageFromMsgAndArgs(msgAndArgs...)},
		{"Error Trace", strings.Join(CallerInfo(), "\n\t\t\t")},
	}...) + "\n" + failureMessage)

	return false
}

// diff returns a diff of both values as long as both are of the same type and
// are a struct, map, slice, array or string. Otherwise it returns an empty string.
func diff[T any](expected, actual T) string {
	ek := reflect.TypeOf(expected).Kind()

	if ek != reflect.Struct &&
		ek != reflect.Map &&
		ek != reflect.Slice &&
		ek != reflect.Array &&
		ek != reflect.String {
		return ""
	}

	var e, a string
	switch ee := any(expected).(type) {
	case string:
		e, a = ee, any(actual).(string)
	default:
		e, a = spew.Sdump(expected), spew.Sdump(actual)
	}

	diff, _ := difflib.GetUnifiedDiffString(difflib.UnifiedDiff{
		A:        difflib.SplitLines(e),
		B:        difflib.SplitLines(a),
		FromFile: "Expected",
		FromDate: "",
		ToFile:   "Actual",
		ToDate:   "",
		Context:  1,
	})

	return diff
}

// Or returns the first non-zero value
func Or[T comparable](xs ...T) T {
	var zero T
	for _, x := range xs {
		if x != zero {
			return x
		}
	}
	return zero
}

// objectsAreEqual determines if two objects are considered equal.
//
// This function does no assertion of any kind.
func objectsAreEqual(expected, actual interface{}) bool {
	if expected == nil || actual == nil {
		return expected == actual
	}

	exp, ok := expected.([]byte)
	if !ok {
		return reflect.DeepEqual(expected, actual)
	}

	act, ok := actual.([]byte)
	if !ok {
		return false
	}
	if exp == nil || act == nil {
		return exp == nil && act == nil
	}
	return bytes.Equal(exp, act)
}

func Equal[T any](t testing.TB, expected, actual T) {
	t.Helper()

	if objectsAreEqual(expected, actual) {
		return
	}

	argNames := q.Q("assert", "Equal")
	expectedName := Or(argNames[1], "expected")
	actualName := Or(argNames[2], "actual")
	Fail(t, fmt.Sprintf(
		"%s: %s\n%s: %s\n%s: \n%s",
		termenv.String(expectedName).Faint(),
		pp.Sprint(expected),
		termenv.String(actualName).Faint(),
		pp.Sprint(actual),
		termenv.String("diff").Faint(),
		diff(expected, actual),
	), "Not equal")
}

// func Equalf[T any](t testing.TB, expected, actual T, format string, args ...any) {
// 	if a.ObjectsAreEqual(expected, actual) {
// 		return
// 	}

// 	diff := diff(expected, actual)
// 	Fail(t, fmt.Sprintf("Not equal:\n"+
// 		"expected: %q\n"+
// 		"actual  : %q%q", q.Q(expected), q.Q(actual), diff), append([]any{format}, args...))
// }

// func NotEqual[T any](t *testing.T, expected, actual T) {
// 	t.Helper()

// 	if !a.ObjectsAreEqual(expected, actual) {
// 		return
// 	}

// 	diff := diff(expected, actual)
// 	Fail(t, fmt.Sprintf("Equal: \n"+
// 		"expected: %s\n"+
// 		"actual  : %s%s", q.Q(expected), q.Q(actual), diff))
// }

func Zero[T any](t *testing.T, actual T) {
	var zero T
	Equal(t, zero, actual)
}

// func NotZero[T any](t *testing.T, actual T) {
// 	var zero T
// 	NotEqual(t, zero, actual)
// }

// func False(t *testing.T, actual bool) {
// 	Equal(t, false, actual)
// }

// func Falsef(t *testing.T, actual bool, format string, args ...any) {
// 	Equalf(t, false, actual, format, args...)
// }

func True(t *testing.T, actual bool) {
	Equal(t, true, actual)
}

// func Truef(t *testing.T, actual bool, format string, args ...any) {
// 	Equalf(t, true, actual, format, args...)
// }

// func NoError(t testing.TB, err error) {
// 	Equal(t, nil, err)
// }

// func Contains[T comparable](t *testing.T, slice []T, item T) {
// 	for _, v := range slice {
// 		if v == item {
// 			return
// 		}
// 	}

// 	Fail(t, fmt.Sprintf("Slice does not contain %s", spew.Sdump(item)))
// }

// func Substring(t *testing.T, text, needle string) {
// 	if strings.Contains(text, needle) {
// 		return
// 	}

// 	Fail(t, fmt.Sprintf("%s does not contain %s", spew.Sdump(text), spew.Sdump(needle)))
// }

// func Substringf(t *testing.T, text, needle string, format string, args ...any) {
// 	if strings.Contains(text, needle) {
// 		return
// 	}

// 	Fail(t, fmt.Sprintf("%s does not contain %s", spew.Sdump(text), spew.Sdump(needle)), append([]any{format}, args...))
// }
